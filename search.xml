<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2020/04/16/keycloak-bu-shu-yi-ji-pei-zhi-kubernetes/"/>
      <url>/2020/04/16/keycloak-bu-shu-yi-ji-pei-zhi-kubernetes/</url>
      
        <content type="html"><![CDATA[<h1 id="一-KeyCloak部署"><a href="#一-KeyCloak部署" class="headerlink" title="一 KeyCloak部署"></a>一 KeyCloak部署</h1><h2 id="下载并运行"><a href="#下载并运行" class="headerlink" title="下载并运行"></a>下载并运行</h2><p> <a href="https://www.keycloak.org/downloads.html" target="_blank" rel="noopener">Keycloak 官方下载</a></p><p>  解压缩后，可以通过下面的启动脚本运行单节点模式的 Keycloak Server。 </p><pre class="line-numbers language-shell"><code class="language-shell">/root/keycloak-7.0.0.Final/bin/add-user-keycloak.sh -u 用户名! 如果不先通过脚本初始化用户 启动服务后被要求只能通过localhost登录才可以初始化用户/root/keycloak-7.0.0.Final/bin/standalone.sh  ## 启动keycloak服务启动后通过8080端口访问<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="C:%5CUsers%5Cicema%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1571294176190.png" alt="1571294176190"></p><p><img src="C:%5CUsers%5Cicema%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1571294303934.png" alt="1571294303934"></p><p> 创建一个测试用 realm，命名为：”Kubernetes”。  创建方法点击上图红框处 </p><p>您会发现，在初始状态下，访问 Keycloak 服务使用的是非安全协议（http），但是正如前面提到过的 Kubernetes 要求和 Auth Server 之间的通讯必须使用 TLS，因此，我们需要在下图 3 所示的 Keycloak 配置页面，将 “Require SSL” 选项设置为 “external requests”。这样，所有外部请求（非来自本 Keycloak 服务器的请求）都被强制要求使用 SSL 连接进行通讯。那么，接下来要做的就是为服务器设置 SSL 所需的 Key 和 Certificate。 修改如下图的配置并保存</p><p><img src="C:%5CUsers%5Cicema%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1571294431434.png" alt="1571294431434"></p><h2 id="创建私有-CA-和-Certificate"><a href="#创建私有-CA-和-Certificate" class="headerlink" title="创建私有 CA 和 Certificate"></a>创建私有 CA 和 Certificate</h2><p> 启动 Keycloak SSL/HTTPS 通讯的关键是设置正确的 Key 和 Certificate。相信很多人的测试环境中，或者内部使用环境中都会使用非商业 CA 签名的 Certificate 或是 Self-signed Certificate。我们选择使用的方式是：创建自己的私有 CA，然后用它签发自己的证书。整个过程可通过下面脚本自动完成，该脚本派生自 makessl.sh。 可根据自己实际环境作相应修改</p><pre class="line-numbers language-shell"><code class="language-shell">#!/bin/bashmkdir -p sslcat << EOF > ssl/ca.cnf[req]req_extensions = v3_reqdistinguished_name = req_distinguished_name[req_distinguished_name][ v3_req ]basicConstraints = CA:TRUEEOFcat << EOF > ssl/req.cnf[req]req_extensions = v3_reqdistinguished_name = req_distinguished_name[req_distinguished_name][ v3_req ]basicConstraints = CA:FALSEkeyUsage = nonRepudiation, digitalSignature, keyEnciphermentsubjectAltName = @alt_names[alt_names]IP.1 = 10.10.111.92EOFopenssl genrsa -out ssl/ca-key.pem 2048openssl req -x509 -new -nodes -key ssl/ca-key.pem -days 3650 -out ssl/ca.pem -subj "/CN=keycloak-ca" -extensions v3_req -config ssl/ca.cnfopenssl genrsa -out ssl/keycloak.pem 2048openssl req -new -key ssl/keycloak.pem -out ssl/keycloak-csr.pem -subj "/CN=keycloak" -config ssl/req.cnfopenssl x509 -req -in ssl/keycloak-csr.pem -CA ssl/ca.pem -CAkey ssl/ca-key.pem -CAcreateserial -out ssl/keycloak.crt -days 3650 -extensions v3_req -extfile ssl/req.cnf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面脚本大体流程如下：</p><ol><li>创建一个私钥。</li><li>用它生成一个私有 CA。</li><li>创建另一个私钥。</li><li>用它生成一个 Certificate Sign Request 证书签名请求。</li><li>用私有 CA 进行签名，生成自己的私有证书。</li></ol><p>整个过程中有个关键点需要特别注意：</p><ul><li><p>在创建私有 CA 时，一定要使用 x509 协议的扩展域来创建一个 CA 标志位是 TRUE 的 CA。不然 Kubernetes 不会将它识别为一个 CA。这是通过下面代码段来实现的</p><pre><code>[ v3_req ]basicConstraints = CA:TRUE</code></pre></li><li><p>如果您的 IdP Server 像本示例一样没有一个固定的公网域名，仅仅只能通过 IP 地址访问，那么一定要在证书中配置 IP 类型的 SAN（Sub Alternative Name），不然证书无法被用于证明属于您这个 IP 地址。这是通过下面代码段来实现的：</p><pre><code>[alt_names]IP.1 = 10.10.111.92</code></pre><p> 脚本运行后生成的结果都在 ./SSL 目录下  。生成文件清单如下： </p><pre><code>ssl-/ |- ca-key.pem  : CA private key |- ca.pem : CA certificate |- keycloak.pem : IdP server private key |- keycloak-csr.pem : IdP server certificate sign request |- keycloak.crt : IdP server signed certificated</code></pre></li></ul><h2 id="生成-keystore"><a href="#生成-keystore" class="headerlink" title="生成 keystore"></a>生成 keystore</h2><p>Keycloak 是 Java based 的工程，它只接受 Java keystore (jks) 格式的秘钥对。我们可以用 JDK 中的 keytool 来生成 Keycloak 接受的 keystore，并把我们之前生成的 Private Key 和 Certificate 导入其中。这里需要注意的一点是，JDK keytool 并不支持直接导入 keypair，我们需要使用 PKCS12 格式做一个转换中介。具体生成 keystore 的脚本如下：</p><h3 id="生成-keystore-并导入-keypair"><a href="#生成-keystore-并导入-keypair" class="headerlink" title="生成 keystore 并导入 keypair"></a>生成 keystore 并导入 keypair</h3><pre><code>openssl pkcs12 -export -out keycloak.p12 -inkey keycloak.pem -in keycloak.crt -certfile ca.pemkeytool -importkeystore -deststorepass &#39;passw0rd&#39; -destkeystore keycloak.jks -srckeystore keycloak.p12 -srcstoretype PKCS12</code></pre><p>这样，我们就把之前生成的 Private Key 和 Certificate 这个 keypair，连同整个认证链上的 CA 都导入了 keystore，您可以通过下面的命令去检查一下新生成的 keystore ‘keycloak.jks’ 中是否包含我们的 keypair。</p><h3 id="检查生成的-keystore"><a href="#检查生成的-keystore" class="headerlink" title="检查生成的 keystore"></a>检查生成的 keystore</h3><pre><code>keytool -list -keystore keycloak.jks -vKeystore type: JKSKeystore provider: SUNYour keystore contains 1 entryAlias name: 1Creation date: Apr 29, 2018Entry type: PrivateKeyEntryCertificate chain length: 2Certificate[1]:Owner: CN=keycloakIssuer: CN=keycloak-caSerial number: b9fcf68309690b61Valid from: Sat Apr 07 06:28:45 UTC 2018 until: Sun Apr 07 06:28:45 UTC 2019C...</code></pre><p>好啦，现在证书有了，我们开始着手配置 Keycloak。</p><h2 id="配置-Keycloak"><a href="#配置-Keycloak" class="headerlink" title="配置 Keycloak"></a>配置 Keycloak</h2><h3 id="修改keycloak配置文件"><a href="#修改keycloak配置文件" class="headerlink" title="修改keycloak配置文件"></a>修改keycloak配置文件</h3><pre class="line-numbers language-xml"><code class="language-xml"># Configuration Path /root/keycloak-7.0.0/standalone/configuration/standalone.xml            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>security-realm</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ApplicationRealm<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>server-identities</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ssl</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>keystore</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>keycloak.jks<span class="token punctuation">"</span></span> <span class="token attr-name">relative-to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jboss.server.config.dir<span class="token punctuation">"</span></span> <span class="token attr-name">keystore-password</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>passw0rd<span class="token punctuation">"</span></span> <span class="token attr-name">alias</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">key-password</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>passw0rd<span class="token punctuation">"</span></span> <span class="token attr-name">generate-self-signed-certificate-host</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>localhost<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ssl</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>server-identities</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>authentication</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>local</span> <span class="token attr-name">default-user</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>$local<span class="token punctuation">"</span></span> <span class="token attr-name">allowed-users</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>*<span class="token punctuation">"</span></span> <span class="token attr-name">skip-group-loading</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>application-users.properties<span class="token punctuation">"</span></span> <span class="token attr-name">relative-to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jboss.server.config.dir<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>authentication</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>authorization</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>application-roles.properties<span class="token punctuation">"</span></span> <span class="token attr-name">relative-to</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jboss.server.config.dir<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>authorization</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>security-realm</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将之前生成的keycloak.jks移动到配置文件目录 然后重新启动 keycloak 通过https 访问8443端口</p><h1 id="二-使用-OpenID-Connect-Token-进行-Kubernetes-身份认证和授权"><a href="#二-使用-OpenID-Connect-Token-进行-Kubernetes-身份认证和授权" class="headerlink" title="二 使用 OpenID Connect Token 进行 Kubernetes 身份认证和授权"></a>二 使用 OpenID Connect Token 进行 Kubernetes 身份认证和授权</h1><h2 id="创建-Client"><a href="#创建-Client" class="headerlink" title="创建 Client"></a>创建 Client</h2><h5 id><a href="#" class="headerlink" title></a><img src="C:%5CUsers%5Cicema%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1571295586409.png" alt="1571295586409"></h5><p><img src="C:%5CUsers%5Cicema%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1571295628352.png" alt="1571295628352"></p><p>红框位置可随意填写一个uri 否则无法生成token</p><p><img src="C:%5CUsers%5Cicema%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1571295729083.png" alt="1571295729083"></p><ul><li><strong>*\</strong>Client Id*<em>*<em>*</em></em>：**Client Identification，在注册 Client 时，可以由用户自己提供，在上图配置页面中位置 (1) 处设置。</li><li><strong>*\</strong>Valid Redirect URL：*<em>**</em>在第一部分中，我们已经详细介绍了 Redirect URL 的重要性，它是 OIDC 安全性保证的一个重要环节。特别是对于 web 应用来说，Keycloak 只会把各种 token 返还给 Client 和 Keycloak 预先约定好的 URL，防止有人冒用 Client 的身份来诱导客户进行认证操作并套取 token。Redirect URL 在上图位置 (2) 处设置。对于非 web 应用来说，OAuth2 协议还提供了另外一个直接获取 token 的授权模式，那就是 Password Grant Type，使用的是 IdP 的 “token/“ endpoint，可以通过提供 User 和 Client 的双重用户名密码来直接获取 token，不用像 web 应用一样通过跳转到 IdP 的 身份认证界面来引导客户手动认证（用户名密码）。这种方式非常适用于像 Kubernetes kubectl 这样的非 web 应用。在本文的示例系统中，我们就采用 Password Grant Type 的认证流程，因此这里设置的 Redirect URL 的有效性并不十分重要，但是其作为创建 Client 的必选项，它的存在很重要，我们这里顺带对它进行一下介绍。</li><li><strong>*\</strong>Client Secret：*<em>**</em>Client 本身也需要认证，向 IdP 证明自己的合法性。Keycloak 支持多种认证形式，在 Client 创建界面的第二个 tab 页面 “Credentials” 里，您可以选择不同的认证形式，如下图 2 所示。这里我们选择 “Client Id and Secret”，也就是用户名密码认证。记下这个 credential，我们会在之后获取 token 的过程中用到它。</li></ul><h2 id="获取Client-Secret"><a href="#获取Client-Secret" class="headerlink" title="获取Client Secret"></a>获取Client Secret</h2><p><img src="C:%5CUsers%5Cicema%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1571295809390.png" alt="1571295809390"></p><h2 id="创建一个User"><a href="#创建一个User" class="headerlink" title="创建一个User"></a>创建一个User</h2><p><img src="C:%5CUsers%5Cicema%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1571295872994.png" alt="1571295872994"></p><p><img src="C:%5CUsers%5Cicema%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1571295903229.png" alt="1571295903229"></p><p> 需要特别注意的是，用户创建完成后要先激活才能使用。默认激活的方法是，打开 “kubernetes realm” 的控制台:<a href="https://10.10.111.92:8443/auth/admin/kubernetes/console" target="_blank" rel="noopener"> https://10.10.111.92:8443/auth/admin/kubernetes/console</a>，使用新创建的用户 “k8s” 和我们刚刚重置的密码进行登录，您就能看到下图 所示的再次修改密码并激活用户的提示。 </p><p><img src="C:%5CUsers%5Cicema%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1571295990710.png" alt="1571295990710"></p><h2 id="配置-kubernetes-API-Server"><a href="#配置-kubernetes-API-Server" class="headerlink" title="配置 kubernetes API Server"></a>配置 kubernetes API Server</h2><h3 id="Kubernetes-API-Server-OIDC-相关配置参数"><a href="#Kubernetes-API-Server-OIDC-相关配置参数" class="headerlink" title="Kubernetes API Server OIDC 相关配置参数"></a>Kubernetes API Server OIDC 相关配置参数</h3><table><thead><tr><th align="left"><strong>参数</strong></th><th align="left"><strong>描述</strong></th><th align="left"><strong>例子</strong></th><th align="left"><strong>必须</strong></th></tr></thead><tbody><tr><td align="left">–oidc-issuer-url</td><td align="left">IdP (本例子中为 Keycloak) 提供的 URL，用于获取对来自该 IdP 的 JWT token 进行签名的证书。像前面反复提到的，URL 必须使用 SSL 协议 https:// 进行访问。通常来说，这个 URL 就是 IdP 的 <a href="https://auth0.com/docs/protocols/oidc/openid-connect-discovery" target="_blank" rel="noopener">Discovery URL</a>，但是去掉所有的 Path 部分，例如： <a href="https://accounts.google.com" target="_blank" rel="noopener">https://accounts.google.com</a> 或者 <a href="https://login.salesforce.com/" target="_blank" rel="noopener">https://login.salesforce.com</a>。 这个 URL 设置为 .well-known/openid-configuration 的下一级 URL 即可。</td><td align="left">下面是官方文档给出的例子： 如果 Discovery URL 是 <a href="https://accounts.google.com/.well-known/openid-configuration。那么本参数应该设置为[https://accounts.google.com](https://accounts.google.com/)。" target="_blank" rel="noopener">https://accounts.google.com/.well-known/openid-configuration。那么本参数应该设置为[https://accounts.google.com](https://accounts.google.com/)。</a> 在本文示例中本参数应设置为：<a href="https://10.10.111.92:8443/auth/realms/kubernetes。" target="_blank" rel="noopener">https://10.10.111.92:8443/auth/realms/kubernetes。</a> 您一定会有兴趣看看 Keycloak 的 Discovery URL：<a href="https://10.10.111.92:8443/auth/realms/kubernetes/.well-known/openid-configuration。" target="_blank" rel="noopener">https://10.10.111.92:8443/auth/realms/kubernetes/.well-known/openid-configuration。</a></td><td align="left">是</td></tr><tr><td align="left">–oidc-client-id</td><td align="left">这里需要设置的就是我们之前在 Keycloak 中创建的 Client Id。</td><td align="left">kubernetes</td><td align="left">是</td></tr><tr><td align="left">–oidc-username-claim</td><td align="left">Claim 是 OIDC 中的概念，本参数和下面三个参数其实是一组参数，我们将在下文中详细介绍。</td><td align="left">sub</td><td align="left">非</td></tr><tr><td align="left">–oidc-username-prefix</td><td align="left">我们将在下文中详细介绍。</td><td align="left">oidc:</td><td align="left">非</td></tr><tr><td align="left">–oidc-groups-claim</td><td align="left">我们将在下文中详细介绍。</td><td align="left">groups</td><td align="left">非</td></tr><tr><td align="left">–oidc-groups-prefix</td><td align="left">我们将在下文中详细介绍。</td><td align="left">oidc:</td><td align="left">非</td></tr><tr><td align="left">–oidc-ca-file</td><td align="left">本参数设置为签发 IdP Certificate 的 CA Certificate 的全路径。对私有 CA 签发的 Certificate 来说，本参数可以设置为以下任一种证书： 签发 IdP Certificate 的私有 CA Certificate。IdP Certificate。</td><td align="left">/etc/kubernetes/ssl/keycloak.crt</td><td align="left">非 （如果不指定，默认将使用 api-server 所在系统的 root CA。对于使用私有 CA 的情况并不适用。）</td></tr></tbody></table><p>用户在通过身份认证后，IdP 会授予用户一组 token，包括 acccess_token，refresh_token (可选)，id_token 等。任何持有这些 token 的客户端应用都可以以该用户的身份获取资源了。这其中，我们重点要关注的是 id_token，Kubernetes 正是通过验证 id_token 来判断访问是否合法，并鉴别是哪个用户发起的访问请求。之所以能实现这些功能，是因为 id_token 中存放着很多格式化信息，这些信息会被 Kubernetes 作为”用户名（Username）”或者” 用户分组（Group）” 信息，而之后这些信息也是进行<strong>授权</strong>（ <strong>Authorization</strong> ）的基础依据。那么，id_token 具体长什么样子呢？</p><p>id_token 是一种<a href="https://jwt.io/introduction/" target="_blank" rel="noopener"> JSON Web Token (JWT)</a>。JWT 是 一个开放标准 (<a href="https://tools.ietf.org/html/rfc7519" target="_blank" rel="noopener">RFC 7519</a>)，是通过一种紧凑、自洽的方式定义了在多点间以安全协议传输 JSON 对象的方法。这种 JSON 对象是经过数字签名的，因此是可被验证的、可信的。JWT 可以使用对称加密算法（算法 HMAC）加密，或者更常见地使用 RSA 算法——Public/Private 秘钥对来加密。JWT 由三个部分组成：</p><ul><li>Header — 记录加密算法。</li><li>Payload — 记录了各种 RFC 7519 规定的或用户自定义的信息域，称为 “Claim”。</li><li>Signature — 对整个 token 的签。</li></ul><p>我们随后会去获取一个 id_token，您可以去解码看一下里面究竟存了什么样的信息。JWT 使用 base64url 编码，但是比较特殊的是，它的三个部分被分别编码并且会有一些 padding，您可以在 <a href="http://jwt.io/" target="_blank" rel="noopener">jwt.io</a> 上解码您的 token。可以使用curl请求获取。我们这里给出用户 “k8s”  的id_token 解码后的 Payload 部分作为示例：</p><pre class="line-numbers language-shell"><code class="language-shell">curl -k 'https://10.10.111.92:8443/auth/realms/kubernetes/protocol/openid-connect/token' -d "client_id=kubernetes" -d "client_secret=7adf4b4a-e074-43b9-a682-e1199085fb01" -d "response_type=code token" -d "grant_type=password" -d "username=k8s" -d "password=123456" -d "scope=openid" |python -m json.tool    "access_token": "eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJ1UDh5Z3prREJmcVEtYWxlOUVxeElHbFE5aUVjT21vSEJrM2pYZk9rQjdnIn0.eyJqdGkiOiIwODIyMDkyOC0zNGRkLTRkODItOWU2MC1mMmZjYjJhYjJhYjkiLCJleHAiOjE1NzEyOTcwNTcsIm5iZiI6MCwiaWF0IjoxNTcxMjk2NzU3LCJpc3MiOiJodHRwczovLzEwLjEwLjExMS45Mjo4NDQzL2F1dGgvcmVhbG1zL2t1YmVybmV0ZXMiLCJhdWQiOiJhY2NvdW50Iiwic3ViIjoiNmUwODA0NDgtNTVjNC00ZDVlLTgyY2EtNjI2YWNjZjQ1YmI0IiwidHlwIjoiQmVhcmVyIiwiYXpwIjoia3ViZXJuZXRlcyIsImF1dGhfdGltZSI6MCwic2Vzc2lvbl9zdGF0ZSI6IjI2MzAwZThhLTBkZjgtNGJmZC05OTcxLTczMjY1MzkzODJlZiIsImFjciI6IjEiLCJhbGxvd2VkLW9yaWdpbnMiOlsiaHR0cDovL2xvY2FsaG9zdDozMzMzMyJdLCJyZWFsbV9hY2Nlc3MiOnsicm9sZXMiOlsib2ZmbGluZV9hY2Nlc3MiLCJ1bWFfYXV0aG9yaXphdGlvbiJdfSwicmVzb3VyY2VfYWNjZXNzIjp7ImFjY291bnQiOnsicm9sZXMiOlsibWFuYWdlLWFjY291bnQiLCJtYW5hZ2UtYWNjb3VudC1saW5rcyIsInZpZXctcHJvZmlsZSJdfX0sInNjb3BlIjoib3BlbmlkIHByb2ZpbGUgZW1haWwiLCJlbWFpbF92ZXJpZmllZCI6ZmFsc2UsInByZWZlcnJlZF91c2VybmFtZSI6Ims4cyJ9.RJ_xYFFcPaNMEUN099_kRaifVtKczOLNtBzGEdpEtP54Jx0uCqIwqQlAGtQC1_Do3zVqVvKWRSUtgzGrWwqbkdFqCV_PaeRuEGiFaUXXhBfFEjXoOAdoRLUR90ddA9MYCvJpx3FqNRPrpP89rOHUAhMUaSvzVLpThZu_tRlHsOSybAHfhrJuQyOhtBWSHZFsKTtRcHtUZkRr_OVZvlqgCPoFOsyU0t3Ru44_GTTkqJWQ5T6lmF0GgfzG97pkZZsAzw6f-1oXCQ7hYj0ha6Untj1qTx6rVcLyx3d9ZNSpjdB94NbiCCQv2-qtio2e7vQhRMsablrkYog9QQD7lKbQnQ",    "expires_in": 300,    "id_token": "eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJ1UDh5Z3prREJmcVEtYWxlOUVxeElHbFE5aUVjT21vSEJrM2pYZk9rQjdnIn0.eyJqdGkiOiJjZWFmMjVkZi04OGZmLTRlOGMtYWQ0NS1kZWY5YWRmZGM5YmMiLCJleHAiOjE1NzEyOTcwNTcsIm5iZiI6MCwiaWF0IjoxNTcxMjk2NzU3LCJpc3MiOiJodHRwczovLzEwLjEwLjExMS45Mjo4NDQzL2F1dGgvcmVhbG1zL2t1YmVybmV0ZXMiLCJhdWQiOiJrdWJlcm5ldGVzIiwic3ViIjoiNmUwODA0NDgtNTVjNC00ZDVlLTgyY2EtNjI2YWNjZjQ1YmI0IiwidHlwIjoiSUQiLCJhenAiOiJrdWJlcm5ldGVzIiwiYXV0aF90aW1lIjowLCJzZXNzaW9uX3N0YXRlIjoiMjYzMDBlOGEtMGRmOC00YmZkLTk5NzEtNzMyNjUzOTM4MmVmIiwiYWNyIjoiMSIsImVtYWlsX3ZlcmlmaWVkIjpmYWxzZSwicHJlZmVycmVkX3VzZXJuYW1lIjoiazhzIn0.g4U255zcCkI1wIkl89dEB8ZH1etSfPzw_b0FBxf4H_n2-TkljwfeN7ZqUCEdVI-MghybRSD9jn3gzLNJowKtzJScaRmuMI5DUb72ZrMxzgF_awteHYw1VHlJpwn95xX0VUpDh1zVGChgbmeS6L8TkTZ--iwrPP5cUK48kg360JuPU9QBtET8gyJB0MXfg5k0JkK8mOnmolvp5Kac-Sg9TwSOOuOH-3bExqQr96URDlReI0HUIFvZL1RMTcKmZobe-FHfLAvZ9BITE-bR6F-NRAhzbHdwCSELXfdD7S_R4gIvjVme05Dvv_jEGa3IdWGdBmaO6N47wE7_XtpT0esCrw",    "not-before-policy": 0,    "refresh_expires_in": 1800,    "refresh_token": "eyJhbGciOiJIUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICIzNzM2NGIxMi1iODEzLTQ0NjMtOWJhYS03ZTJkNTRmZjRiZDcifQ.eyJqdGkiOiJkMjFlZWJjZS1mZWQwLTQ0MTMtYWZkNC0zZDQyZWUxMDBhYTUiLCJleHAiOjE1NzEyOTg1NTcsIm5iZiI6MCwiaWF0IjoxNTcxMjk2NzU3LCJpc3MiOiJodHRwczovLzEwLjEwLjExMS45Mjo4NDQzL2F1dGgvcmVhbG1zL2t1YmVybmV0ZXMiLCJhdWQiOiJodHRwczovLzEwLjEwLjExMS45Mjo4NDQzL2F1dGgvcmVhbG1zL2t1YmVybmV0ZXMiLCJzdWIiOiI2ZTA4MDQ0OC01NWM0LTRkNWUtODJjYS02MjZhY2NmNDViYjQiLCJ0eXAiOiJSZWZyZXNoIiwiYXpwIjoia3ViZXJuZXRlcyIsImF1dGhfdGltZSI6MCwic2Vzc2lvbl9zdGF0ZSI6IjI2MzAwZThhLTBkZjgtNGJmZC05OTcxLTczMjY1MzkzODJlZiIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgcHJvZmlsZSBlbWFpbCJ9.G-Go8XL4_4z5LVuuduLtlWRGeqiXNriJdZYP0JB1nV8",    "scope": "openid profile email",    "session_state": "26300e8a-0df8-4bfd-9971-7326539382ef",    "token_type": "bearer"}记下上面的 id_token，它就是您开启 Kubernetes 的钥匙。但不幸的是，它的有效期非常短，所以另一个真正关键的 token 是：refresh_token，在 id_token 过期后，使用 refresh_token，Client Application 可 以自动去获取新的 id_token 。您可以在 Keycloak 管理界面中设置 id_token 和 refresh_token 的有效期，这里不再赘述。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="C:%5CUsers%5Cicema%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1571296963093.png" alt="1571296963093"></p><p> 如上所示，其中每一项数据就叫一个 Claim，而这些奇奇怪怪的 Claim 名称都有其固定的含义，他们一部分是 jwt <a href="https://tools.ietf.org/html/rfc7519#section-4.1" target="_blank" rel="noopener">Registered Claims</a> 中定义的, 一部分是 jwt 的 <a href="https://www.iana.org/assignments/jwt/jwt.xhtml" target="_blank" rel="noopener">Public Claim</a> 中定义的。 </p><h2 id="Kubernetes-API-Server-OIDC-配置参数中-JWT-Claim-相关参数"><a href="#Kubernetes-API-Server-OIDC-配置参数中-JWT-Claim-相关参数" class="headerlink" title="Kubernetes API Server OIDC 配置参数中 JWT Claim 相关参数"></a>Kubernetes API Server OIDC 配置参数中 JWT Claim 相关参数</h2><table><thead><tr><th align="left"><strong>参数</strong></th><th align="left"><strong>描述</strong></th><th align="left"><strong>例子</strong></th><th align="left"><strong>必须</strong></th></tr></thead><tbody><tr><td align="left">–oidc-username-claim</td><td align="left">该参数表示哪个 JWT Claim 被 Kubernetes 解析为 User name。默认使用 sub，它是一个 jwt Register Claim，应该被设置为终端用户唯一的 identifier。根据 IdP 的不同，我们也可以选择 name 或者 email。但是，如果这里我们选择了 email 之外的其它 Claim，为了保证 user name 的唯一性，username 前面会自动被添加上 IdP 的 issuer URL 作为前缀，构成一个唯一用户名。</td><td align="left">从上面解码的 Keycloak 生成的 id_token 中，preferred_username Claim 中记录了用户名信息，在本示例中，我们选择它作为本参数值。</td><td align="left">非</td></tr><tr><td align="left">–oidc-username-prefix</td><td align="left">用户名前缀，用来避免用户名冲突。比如说，将这个参数设置为“oidc:”，Keycloak 中通过认证的用户是 theone，Kubernetes 则会认为真正的用户为 oidc:theone。如果这个参数未被设置并且 –oidc-user-claim 被设置为 email 之外的其它值，那么系统会自动添加 issuer URL 作为用户名前缀，issuer URL 是在参数 –oidc-issuer-url 中指定的值。最后，我们可以通过指定参数“-”来禁止 Kubernetes 添加任何前缀。</td><td align="left">本示例中，我们只创建了一个用户，不存在命名冲突。我们把本参数设置为“-”。</td><td align="left">非</td></tr><tr><td align="left">–oidc-groups-claim</td><td align="left">同 –oidc-username-claim，该参数指定哪个 Claim 被作为用户分组（Group）信息。用户分组信息涉及到用户的授权管理，您可以看到，在上面的 Keycloak id_token 中并没有 Claim 明用户分组信息，那是因为我们没有在 Keycloak 端为新用户添加任何分组。我们稍后会在授权管理的部分介绍如何添加分组信息。本参数必须是一个数组。</td><td align="left">我们先把该参数设置为 groups，稍后我们会介绍如何在 id_token 中建加上这个 Claim。</td><td align="left">非</td></tr><tr><td align="left">–oidc-groups-prefix</td><td align="left">同 –oidc-username-prefix，Group name 的前缀，但没有默认值。</td><td align="left">本示例中，该项可不设置。</td><td align="left">非</td></tr></tbody></table><p> 在了解所有 Kubernetes API Server OIDC 相关配置参数的含义和示例值之后，我们可以着手在 Kubernetes server 上修改 API Server 的配置文件，具体修改内容如下： </p><pre><code>    - --oidc-issuer-url=https://10.10.111.92:8443/auth/realms/kubernetes    - --oidc-client-id=kubernetes    - --oidc-username-claim=preferred_username    - --oidc-username-prefix=-    - --oidc-ca-file=/etc/kubernetes/pki/keycloak.crt  ## 修改文件之前需要将之前生成的keycloak.crt 拷贝到/etc/kubernetes/pki/keycloak.crt</code></pre><p>修改完成后保存 等待api-server重新启动</p><h2 id="在-kubectl-中使用-tokens-访问-Kubernetes-API-Server"><a href="#在-kubectl-中使用-tokens-访问-Kubernetes-API-Server" class="headerlink" title="在 kubectl 中使用 tokens 访问 Kubernetes API Server"></a>在 kubectl 中使用 tokens 访问 Kubernetes API Server</h2><p> 获取 token 的目的就是要在各种 Kubernetes Client Application 中使用它，让您能通过这些 Client 来访问 Kubernetes API Server。kubectl 显然是首选 Client，让 kubectl 以我们创建的用户 “k8s” 的身份来访问 Kubernetes，并通过身份认证，我们需要对您的 kubectl 进行配置 </p><pre><code># 创建userkubectl config set-credentials k8s \ --auth-provider=oidc \ --auth-provider-arg=idp-issuer-url=https://10.10.111.92:8443/auth/realms/kubernetes \ --auth-provider-arg=client-id=kubernetes \ --auth-provider-arg=client-secret=c95f4e3a-40c8-46f5-abbf-bbd1782b2f42 \ --auth-provider-arg=refresh-token=eyJhbGciOiJIUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICIzNzM2NGIxMi1iODEzLTQ0NjMtOWJhYS03ZTJkNTRmZjRiZDcifQ.eyJqdGkiOiJkMjFlZWJjZS1mZWQwLTQ0MTMtYWZkNC0zZDQyZWUxMDBhYTUiLCJleHAiOjE1NzEyOTg1NTcsIm5iZiI6MCwiaWF0IjoxNTcxMjk2NzU3LCJpc3MiOiJodHRwczovLzEwLjEwLjExMS45Mjo4NDQzL2F1dGgvcmVhbG1zL2t1YmVybmV0ZXMiLCJhdWQiOiJodHRwczovLzEwLjEwLjExMS45Mjo4NDQzL2F1dGgvcmVhbG1zL2t1YmVybmV0ZXMiLCJzdWIiOiI2ZTA4MDQ0OC01NWM0LTRkNWUtODJjYS02MjZhY2NmNDViYjQiLCJ0eXAiOiJSZWZyZXNoIiwiYXpwIjoia3ViZXJuZXRlcyIsImF1dGhfdGltZSI6MCwic2Vzc2lvbl9zdGF0ZSI6IjI2MzAwZThhLTBkZjgtNGJmZC05OTcxLTczMjY1MzkzODJlZiIsInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJvZmZsaW5lX2FjY2VzcyIsInVtYV9hdXRob3JpemF0aW9uIl19LCJyZXNvdXJjZV9hY2Nlc3MiOnsiYWNjb3VudCI6eyJyb2xlcyI6WyJtYW5hZ2UtYWNjb3VudCIsIm1hbmFnZS1hY2NvdW50LWxpbmtzIiwidmlldy1wcm9maWxlIl19fSwic2NvcGUiOiJvcGVuaWQgcHJvZmlsZSBlbWFpbCJ9.G-Go8XL4_4z5LVuuduLtlWRGeqiXNriJdZYP0JB1nV8 \ --auth-provider-arg=idp-certificate-authority=/etc/kubernetes/pki/keycloak.crt \ --auth-provider-arg=id-token=eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJ1UDh5Z3prREJmcVEtYWxlOUVxeElHbFE5aUVjT21vSEJrM2pYZk9rQjdnIn0.eyJqdGkiOiJjZWFmMjVkZi04OGZmLTRlOGMtYWQ0NS1kZWY5YWRmZGM5YmMiLCJleHAiOjE1NzEyOTcwNTcsIm5iZiI6MCwiaWF0IjoxNTcxMjk2NzU3LCJpc3MiOiJodHRwczovLzEwLjEwLjExMS45Mjo4NDQzL2F1dGgvcmVhbG1zL2t1YmVybmV0ZXMiLCJhdWQiOiJrdWJlcm5ldGVzIiwic3ViIjoiNmUwODA0NDgtNTVjNC00ZDVlLTgyY2EtNjI2YWNjZjQ1YmI0IiwidHlwIjoiSUQiLCJhenAiOiJrdWJlcm5ldGVzIiwiYXV0aF90aW1lIjowLCJzZXNzaW9uX3N0YXRlIjoiMjYzMDBlOGEtMGRmOC00YmZkLTk5NzEtNzMyNjUzOTM4MmVmIiwiYWNyIjoiMSIsImVtYWlsX3ZlcmlmaWVkIjpmYWxzZSwicHJlZmVycmVkX3VzZXJuYW1lIjoiazhzIn0.g4U255zcCkI1wIkl89dEB8ZH1etSfPzw_b0FBxf4H_n2-TkljwfeN7ZqUCEdVI-MghybRSD9jn3gzLNJowKtzJScaRmuMI5DUb72ZrMxzgF_awteHYw1VHlJpwn95xX0VUpDh1zVGChgbmeS6L8TkTZ--iwrPP5cUK48kg360JuPU9QBtET8gyJB0MXfg5k0JkK8mOnmolvp5Kac-Sg9TwSOOuOH-3bExqQr96URDlReI0HUIFvZL1RMTcKmZobe-FHfLAvZ9BITE-bR6F-NRAhzbHdwCSELXfdD7S_R4gIvjVme05Dvv_jEGa3IdWGdBmaO6N47wE7_XtpT0esCrw # 创建context kubectl config set-context k8s@kubernetes --cluster=kubernetes --user=k8s --namespace=default #切换context kubectl config use-context k8s@kubernetes</code></pre><h3 id="kubectl-运行结果"><a href="#kubectl-运行结果" class="headerlink" title="kubectl 运行结果"></a>kubectl 运行结果</h3><pre><code>[root@zk-2 kubernetes]# kubectl get poError from server (Forbidden): pods is forbidden: User &quot;k8s&quot; cannot list resource &quot;pods&quot; in API group &quot;&quot; in the namespace &quot;default&quot;</code></pre><p> 上面的 Error 信息是正常的，它提示您，我们已经通过了用户 “k8s” 的认证。但是 “k8s” 并没有访问 Kubernetes 任何资源的权限，甚至连基本的 pods list 权限都没有。那么究竟谁在控制每个用户的权限呢？那就是 Kubernetes 授权管理模块（Authorization）。 </p><h2 id="为新用户授权"><a href="#为新用户授权" class="headerlink" title="为新用户授权"></a>为新用户授权</h2><p><strong>授权（Authorization）</strong>是 Kubernetes 另一个庞大的主题，详细细节请参考 <a href="https://kubernetes.io/docs/reference/access-authn-authz/authorization/" target="_blank" rel="noopener">Kubernetes Authorization - 授权</a>。本文中仅仅使用 Role Based Access Control（RBAC）——基于角色的访问控制机制，简单对授权做一个介绍。重点介绍如何在 Keycloak 端为用户角色添加角色属性。</p><h3 id="Kubernetes-RBAC"><a href="#Kubernetes-RBAC" class="headerlink" title="Kubernetes RBAC"></a>Kubernetes RBAC</h3><p>为了让我们的新用户 “theone” 具有 Kubernetes 资源的访问权限，需要在 Kubernetes 中为其授权。RBAC 是将 Kubernetes resources 和 Kube API 的访问权限赋予一些“角色”（Role），然后通过 “User RoleBinding” 给单个用户赋予某个角色，或通过 “Group RoleBinding” 给一组用户赋予某个角色。用户获取角色后，就能相应获取该角色所具有的权限。其原理如下图 5 所示。</p><h5 id="Kubernetes-Role-Based-Access-Control（RBAC）"><a href="#Kubernetes-Role-Based-Access-Control（RBAC）" class="headerlink" title="Kubernetes Role Based Access Control（RBAC）"></a>Kubernetes Role Based Access Control（RBAC）</h5><p><img src="https://www.ibm.com/developerworks/cn/cloud/library/cl-lo-openid-connect-kubernetes-authentication2/image005.png" alt="img"></p><p>User、RoleBinding、Role 都是 Kubernetes 的 Object，Resource 是我们要访问的 Kubernetes 中的 Object 或 API。而 Group 则是 User 的一个属性，在用户访问 Kubernetes Server API 的时候，Group 属性会作为 “Request Attribute” 传入，并被作为授权的重要依据。</p><p>我们假设有一个叫 “manager” 的 Group，我们要给这个 Group 赋予集群管理员（cluster-admin）的角色，这是通过在 Kubernetes 中创建如下的 ClusterRolebinding 来实现的。注意，下面的命令必须是由另一个具有相应权限的用户执行。</p><h3 id="创建-ClusterRoleBinding"><a href="#创建-ClusterRoleBinding" class="headerlink" title="创建 ClusterRoleBinding"></a>创建 ClusterRoleBinding</h3><p>！之前的操作中我们将context切换到了K8S用户 执行这一步 我们需要切换成之前的用户</p><p>关于kubectl context的相关命令示例</p><pre><code>## 如上命令为获取所有context *表示当前使用k8s 用户context[root@zk-2 kubernetes]# kubectl config get-contextsCURRENT   NAME                          CLUSTER      AUTHINFO           NAMESPACE*         k8s@kubernetes                kubernetes   k8s                default          kubernetes-admin@kubernetes   kubernetes   kubernetes-admin             zk@kubernetes                 kubernetes   zk                 default## 切换context[root@zk-2 kubernetes]# kubectl config use-context kubernetes-admin@kubernetesSwitched to context &quot;kubernetes-admin@kubernetes&quot;.</code></pre><pre class="line-numbers language-shell"><code class="language-shell">kubectl create -f - -o yaml <<EOFkind: ClusterRoleBindingapiVersion: rbac.authorization.k8s.io/v1metadata:  name: managers-role-bindingsubjects:- kind: Group  name: manager # Name is case sensitive  apiGroup: rbac.authorization.k8s.ioroleRef:  kind: ClusterRole  name: cluster-admin  apiGroup: rbac.authorization.k8s.ioEOF<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上例中，cluster-admin 是一个 Kubernetes 系统默认的 Role，它拥有对平台的的超级用户访问权限，可以在任何 Resource 上执行任何操作。</p><p>完成了上面的操作后，我们拥有了一个逻辑上的用户分组 “manager”，下一步就是把 “k8s” 放入这个分组中。如上所述，分组并不是一个 Kubernetes 中真实的对象，它只是 User 的一个属性，我们只需要给 User 添加一个分组属性即可，而用户信息都是由 Keycloak 来管理的，因此我们需要在 Keycloak 端给 “theone” 用户添加分组属性</p><h2 id="在-Keyclock-中为用户添加分组属性"><a href="#在-Keyclock-中为用户添加分组属性" class="headerlink" title="在 Keyclock 中为用户添加分组属性"></a>在 Keyclock 中为用户添加分组属性</h2><p> 在 Keycloak “kubernetes realm” 的管理界面中，我们选择 “Users” 子界面，点开 “k8s” 管理界面，在 “Attributes” tab 中，可以给用户添加任意的 attribute，形式为 Key-Value。如下图 所示，我们为用户 “k8s” 添加了一个叫 “groups” 的属性，值设置为 “manager”。 </p><p><img src="C:%5CUsers%5Cicema%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1571298420366.png" alt="1571298420366"></p><p> 仅仅为 User 添加属性是不够的，我们必须让该属性被包含在 id_token 中，才能在 Kubernetes 端使用它。这一步是通过创建一个<a href="https://www.keycloak.org/docs/3.2/server_admin/topics/clients/protocol-mappers.html" target="_blank" rel="noopener"> OIDC Token Mapping </a>来实现的。操作在下图 7所示的控制界面上进行，通过创建一个新的 Mapper，将 User 的 groups 属性自动植入 id_token 中 。 </p><p><img src="C:%5CUsers%5Cicema%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1571298525610.png" alt="1571298525610"></p><p>创建 Mapper 时，需要注意上图中标注的几个域。</p><ol><li>User Attribute：我们在上一步中为 “k8s” 添加的新 attribute——groups。</li><li>Token Claim Name：新属性在 jwt（也就是 id_token）中的 Claim。该名字至关重要，在“配置 kubernetes API Server”一节中，我们介绍过了，这个代表分组的 Claim 称需要被设置到 Kubernetes API Server 的 –oidc-groups-claim 参数中。这里使用 “groups” 作为 Claim。</li><li>Claim JSON Type：Attribute 的数值类型。</li><li>Add to ID token：该选项必须设置为 ON，保证把新属性插入 id_token 中 。</li><li>Add to access token：同上，是否将该属性插入 access_token 中 。</li><li>Multivalued：本选项必须设置为 ON，保证 “groups” Claim 的值为一个 String 数组，其中每个值代表 User 所属的一个分组，一个 User 可以同时属于多个分组，每个值之间使用逗号分隔。Kubernetes API Server 要求 –oidc-groups-claim 所指定的 Claim 值必须为数组类型，因此该选项也必须设置为 ON。</li></ol><p>添加完 Attribute，创建完 Mapper，我们再次向 Keycloak 进行认证请求，检视获取的 User “k8s” 的 id_token，您会发现，jwt 中出现了新的 Claim：groups。如下列表所示。</p><p><img src="C:%5CUsers%5Cicema%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1571298674103.png" alt="1571298674103"></p><ol><li>根据新的id_token 重新生成kubectl context</li><li>修改api-server配置 添加 - –oidc-groups-claim=groups</li><li>重启api-server </li></ol><p>kubectl 中使用新生成的 context 执行之前 list pod 的命令，您会得到如下所示的结果，这表示 “k8s”用户 已经完全具备了 get 资源的权限。 </p><pre class="line-numbers language-shell"><code class="language-shell">User "k8s" set.[root@zk-2 ~]# kubectl config set-context k8s@kubernetes --cluster=kubernetes --user=k8s --namespace=defaultContext "k8s@kubernetes" modified.[root@zk-2 ~]# kubectl config use-context k8s@kubernetesSwitched to context "k8s@kubernetes".[root@zk-2 ~]# kubectl get poNo resources found.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
